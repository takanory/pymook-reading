===================================
 第4回 入門Webアプリケーション開発
===================================

.. contents:: 目次
   :local:

はじめに
========
鈴木たかのりです。

`前回 <http://gihyo.jp/news/report/01/python-training-book-reading-club/0003>`_
に引き続き
`Pythonエンジニア養成読本 <http://gihyo.jp/book/2015/978-4-7741-7320-7>`_
という書籍の `読書会イベント <http://pymook.connpass.com/>`_ についてレポートします。

`第4回の読書会 <http://pymook.connpass.com/event/18062/>`_ は8月27日(木)に `アライドアーキテクツ株式会社 <http://www.aainc.co.jp/>`_ の会議室で開催されました。

当日はだいたい以下のタイムテーブルで進めました。

- 19:00-19:15 参加者の自己紹介
- 19:15-21:00 「第5章 入門Webアプリケーション開発」
- 21:00-22:00 ビアバッシュ(ビールとピザでの参加者懇親会)

今回も過去3回と同様に書籍の読みあわせはせず、ページ数の関係で削ったところや、出版後の追加情報を中心に解説を行いました。

自己紹介
========
いつものように最初に参加者全員で自己紹介を行いました。今回は17名の方が参加しました。

自己紹介の中では「4回参加」「3回参加」など結構いつもみる顔の方ができたのがいいですね。
逆に初参加の方も2名いて、そのうち1名は一週間前に筆者が発表したPython入門を聞いて、その直後に読書会に参加してくれたそうです。ありがたいです。

- 参考: `【 ヒカ☆ラボ 】Pythonに興味がある方必見！PyCon JP 2015座長が語る、「Python言語」はじめの一歩！  <https://atnd.org/events/68337>`_

また、今回は「第5章 入門Webアプリケーション開発」が題材ですが、普段Web開発を行っていない方がほとんどで、Web開発を行っている方はPHPやJavaなどを使っているとのことでした。

第5章 入門Webアプリケーション開発
=================================
自己紹介の後に5章の著者の関根 裕紀(`@checkpoint <https://twitter.com/checkpoint>`_)から自己紹介がありました。

業務ではPythonはメインではあまり使っておらず、趣味や業務の一部で使用しているとのこと。
また、最近は新卒メンバー、若手メンバーの教育支援も行っているそうです。

Pythonとの関わりは `PyCon JP <http://pycon.jp/>`_ のスタッフ、Pythonエンジニア養成読本の執筆やスピーカーとしてPython関連の

また、 `Pythonもくもく会 <http://mokupy.connpass.com/>`_ というハッカソンイベントを毎月開催しているそうです。

5-1 Webアプリケーションフレームワーク入門
-----------------------------------------
Webはフレームワークを使って作るよね。
フレームワークとは枠組み。フレームワークを使うと、その枠組にそって作ることができる。

- Djangoは全部入り。10年位の歴史がある。開発はいまでも活発。保守的で後方互換性を重要視している。大規模な事例が多い。Ruby on Railsとかは全部入りっていう意味では近いかも。でも思想は違う。
- Pyramid: マイクロフレームワーク。JavaだとSpringとかが近い?サードパーティーのモジュールを組合わせる
- Tornado: Facebookが開発しているフレームワーク。非同期で大量のデータをさばくときに使われている。PyCon JP 2014でもGunosyやアプリのプッシュ配信などで使っているという。開発が活発。
- Flask: Bottleと似ている。軽量で簡単に使える。Djangoだと最初に使うときに覚えることが膨大。

なに使っている
- Flask
- Sximada: Django, Pyramid, Tornado

  - Django: Python知らない人が多い。Django Adminを使いたい

おすすめするのはDjango。ドキュメントがちゃんとしている。Googleとかでもいろいろひっかかるので。
プロトタイプとかだとBottleがおすすめ。

Bottle
~~~~~~
- ルーティング、テンプレートエンジン、HTTPユーティリティ、サーバの4機能がある
- 1ファイルなので、勉強にもよい
- Bottleのソースコードリーディングをやりたいと思っている
- ルーティング: URLでhelloにアクセスされたら、どの関数を返すかというマッピング
- Q: デコレータとはなにか

  - 関数に対して追加で処理を行いたいときに、デコレーターを書くことによって処理を付与することができる
  - デコレーターは自分で書くこともできる
  - デコレーターなしでも書けるけど、デコレーター使うと書きやすい
  - 3つの関数が別の値を返す。でもそれに、特定の文字列をつけたい。みたいなときに多いかなという印象。
  - login rquired デコレーターをつけて、ログインチェックするとか

- GET/POSTとかに対応するデコレーターもあるよ
- HTTP ユーティリティ、だいたいのWebフレームワークだと同じようなものがある、だいたい同じ感じ

テンプレートエンジン
~~~~~~~~~~~~~~~~~~~~
- テンプレートエンジン: Jinja2、Mako、Djangoテンプレート。最低限を見対している
- Webアプリケーションからレスポンスを返すときに、プログラムのコードで文字列連結してHTML作るのは大変。テンプレートエンジンを使って、テンプレートに値をつっこむと楽
- Bottleのテンプレートエンジンは継承ができるので、ヘッダー・フッターを共通化とかできる
- Q: Rebaseの使い方がわかりにくかった
- A: Djangoだと継承と同じ。

  - rebase は base となる親テンプレートにこの内容が展開される
  - rebase と書いたファイルが親に展開される。include は自分のところに持ってくる

- PHPも最近はWebサーバーを内蔵している。PythonのフレームワークはWSGIサーバーを使っている。それにのっとっているアプリケーション・サーバーを使う。通常はuWSGI, gunicornを使う。Tornadoは自分自身でWebアプリケーション・サーバーを持っているので、それを使う。
- Pythonは仕様がしっかりしているので、ちゃんと使えるのでいい感じ。

- Djangoははじめる前に覚えるべきことが多いため、この本ではBottleを採用した
- Q: 初心者にとっつきやすいかなと思ったが、HTMLを覚えないといけないか?tplファイルもほとんどHTMLファイル。
- A: HTMLとCSSは必要。あとJavascriptも必要となっている。
- A: Webを知らない人を対象にしてしまうと、そもそもWebはどうなっているか、HTMLとかの説明も必要になってしまう。HTMLはどうしても必要。
- A: CSSとJSはBootstrapとかを使って楽をする。HTMLは勉強する必要はあり。

5-2 データベース開発入門
------------------------
- ここでhirokiky参戦
- PEP 249でデータベースとのAPI仕様が定義されている。それで、いろんなデータベースとつなぐためのアダプターがある
- そのまま使うことも可能だが、データベースに特化したO/Rマッパーを使うのが一般的
- ここではSQLAlchemyを使うよ
- SQLAlchemyの用語と概念とかがあるので、まずはそれにのっとって使おう
- Q: 最新は1.0.8だが
- A: 出版した時には1.0系が出た。今は1.0.8が最新。0.9系はこれからはメンテナンスモード。これからは1.0系を使おう。ここで出てくる例は 1.0 でもそのまま使えると思う。
- SQLAlchemyではデータベースにアクセスするときにSessionを使う
- O/Rマッパーなので、Pythonのオブジェクトを扱っている用にデータベース上の値を取得したり、変更できる
- 高機能なので、見ながら覚えてください
- SQL好きな人に好かれる(私見)
- データベースのmigrationを使うと思うが、alembicを使う
- Pyramidの場合はSQLAlchemyを使うのが多いので、migrationにはalembicを使う
  https://pypi.python.org/pypi/alembic
- Webアプリじゃなくて単独でも使える。バッチ処理とかでも使えるよ。

5-3 ［サンプル］書籍管理アプリの作成
------------------------------------
- 実際にアプリを動かして動作を見せる
- コードは全部でXXXX行くらい、クラスは2つ
- githubからコードもインストールできます
- https://github.com/checkpoint/pymook_web_application

  - readme の bottle-sqlalchemy のとこが切れてる...

- Djangoはこれらのものはひと通り入っているので、追加でいれなくてもOK
- templateの中でfor文を使える
- WebアプリケーションだとCRUDを最初に作るよね
- 流れとしてはほとんど同じかと
- モデル作る、フォームから値をとりだす、モデルに入れる、一覧に飛ぶ
- Webアプリケーションを本格的に作る場合には考えることが増える

  - セッション管理(ビーカーとか使う)
  - セキュリティ対策
  - いろんな道具を組み合わせて使えるのがBottleのいい面

- Beakerで言うセッションはWebアプリケーションでログインしてカートに入れるとかそういうセッション。SQLAlchemyでいうセッションとは別。
- JavaだとHibernateとかがDBのセッションとかの情報を使うよね
- Q: フォームで XSS 対策はどうするの
- A: Bottleはセキュリティ対策は自前で作るか、なにかサードパーティーのを持ってくる。Djangoは XSS, CSRF 等々ひととおり持っている
- A: 簡単に作りたいときにDjangoとかを使うのは面倒な側面もある
- Q: フォームとかどれ使えばいいの?
- A: DBはSQLAlchemy、フォームはどれがいいかなってのは苦労した。ライブラリ探すときはgithub見たり、google検索したり、stackoverflow見たりしている。勉強会に参加して聞いてみたり
- Bottleのドキュメントにレシピとかでどれと組み合わせるべきかとか書いてあるよ

- Bottleはプロトタイプを作るときに楽。
- Plone Symposium用に半日くらいで作ったアプリ。Bottleで作った。airbnbからスクレイピングして東京と京都の物件をグラフ表示した
- ただ見せるだけとかならBottleが向いている。とっかかりとしてはいいと思う
- フレームワークを作る方法についても勉強になる

質疑応答
--------
- Q: Bottleでサーバーを起動するときのapp.pyって、ファイルの名称とか起動方法はこれがきまっているの?
- A: ファイル名なんでもOK。コンソールから起動するので ``if __name__ == `__main__:`` を入れるのをお忘れなく
- Q: プロトタイピングのときは app.py から呼ぶと思うが、プロダクションだとどうするの?
- A: Bottleをプロダクションで使ったことがない。Webアプリケーション・サーバー

ビアバッシュ(懇親会)
====================

まとめ
======
4回目の読書会もXXXX

最終回となる次回読書会は9月17日(木)に開催します。内容は「第6章 環境構築の自動化」で `Ansible <http://www.ansible.com/>`_ について取り上げます。
本を読んで試して疑問がある方、もっとここが知りたい!!という所がある方など、ぜひ参加してください。参加申し込みは下記のURLからできます。

- `「Pythonエンジニア養成読本」読書会 05 <http://pymook.connpass.com/event/19107/>`_

では、次回もよろしくお願いします。

